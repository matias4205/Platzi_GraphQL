"Valida los tipos de nivel"
enum Level {
    principiante
    intermedio
    avanzado
}

type Course {
    _id: ID!
    title: String!
    teacher: String!
    description: String
    topic: String @deprecated
    people: [Student]
    level: Level
}

interface Person {
    _id: ID!,
    name: String!,
    email: String!
}

type Monitor implements Person{
    _id: ID!,
    name: String!,
    email: String!
    phone: String
}

type Student implements Person{
    _id: ID!,
    name: String!,
    email: String!
    avatar: String
}

type Query{
    "Devuelve todos los cursos"
    getCourses: [Course]
    "Devuelve un curso especifico"
    getCourse(id: ID!): Course
    "Devuelve todos los estudiantes"
    getPeople: [Person]
    "Devuelve un estudiante especifico"
    getPerson(id: ID!): Person
}

input CourseInput{
    title: String!
    teacher: String!
    description: String
    topic: String
    level: Level
}

input CourseEditInput{
    title: String
    teacher: String
    description: String
    topic: String
    level: Level
}

input PersonInput{
    name: String!,
    email: String!,
    phone: String
    avatar: String
}

input PersonEditInput{
    name: String,
    email: String,
    phone: String
    avatar: String
}

type Mutation{
    "Crea un curso"
    createCourse(input: CourseInput!): Course
    "Edita un curso"
    editCourse(id: ID!, input: CourseEditInput!): Course
    "Crea una persona"
    createPerson(input: PersonInput!): Student
    "Edita una persona"
    editPerson(id: ID!, input: PersonEditInput!): Student
    "Elimina un curso"
    deleteCourse(id: ID!): ID
    "Elimina un estudiante"
    deletePerson(id: ID!): ID
    "Agrega una persona a un curso"
    addPeople(courseId: ID!, personId: ID!): Course
}